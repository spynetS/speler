package com.example;

import java.util.List;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import com.example.scripting.*;
import com.example.UpdateSystem;



public class ECS {
    public Map<UUID, Map<Class<?>, Component>> components = new HashMap<>();
    public List<UUID> entities = new ArrayList<>();
    public List<UpdateSystem> updateSystems = new LinkedList<>();

    // Create a new entity
    public UUID instantiate() {
        UUID uuid = UUID.randomUUID();
        entities.add(uuid);
        return uuid;
    }

    // Add a system
		public void addSystem(UpdateSystem system) {
				updateSystems.add(system);
		}



    // Add a component to an entity
    public <T extends Component> void addComponent(UUID entityId, T component) {
        components.computeIfAbsent(entityId, id -> new HashMap<>())
                  .put(component.getClass(), component);
    }

    // Get a component from an entity
    public <T> T getComponent(UUID id, Class<T> componentClass) {
        Map<Class<?>, Component> entityComponents = components.get(id);
        if (entityComponents == null) return null;
        Component comp = entityComponents.get(componentClass);
        if (componentClass.isInstance(comp)) return componentClass.cast(comp);
        return null;
    }

    // Get all entities
    public List<UUID> getEntities() {
        return entities;
    }

    // Main update loop: call all systems
    public void update(float deltaTime) {
        for (UpdateSystem system : updateSystems) {
            system.update(this, deltaTime);
        }
    }

    // ---------------- Component Definitions ----------------
    public static interface Component {}

    public static class Transform implements Component {
        public int x = 0, y = 0;
    }

    public static class Renderable implements Component {
        public String sprite = "";
        public Renderable(String sprite) { this.sprite = sprite; }
    }

    public static class ScriptComponent implements Component {
        public Script script;
        public ScriptComponent(Script script) { this.script = script; }
    }

    // ---------------- System Definitions ----------------

}
